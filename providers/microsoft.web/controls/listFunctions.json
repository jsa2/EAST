{
"ControlId": "listFunctions",
"Category": "Access",
"Description": "\r\n\r\n\r\n**Advanced check for Azure Functions:**\r\n\r\ntask|result\r\n-|-\r\n✅Bindings | Lists function bindings. Does extra check for anonymous HTTP Triggers\r\n✅AAD Auth | Checks if function has inbound Azure AD Authentication enabled, when there are anoynous HTTP Triggers\r\n✅functionAppScaleLimit| Checks if scaling limit is not in place\r\n✅Composite| In reporting phase this function uses the listRoles check if managed identity is used with anonymous auth\r\n\r\n**Conditions for failing check**\r\n\r\n``❌ functionAppScaleLimit == 0`` - Means attacker can incur cost on with no set scaling limit\r\n``❌ 'no aad auth' == 0`` - Anonymous function with no AAD auth\r\n![img](https://user-images.githubusercontent.com/58001986/151297971-c06ba0ab-0b8d-4d66-a53f-6b56867a3185.png)\r\n\r\n**Exceptions**\r\n\r\n*Sometimes anonymous functions are needed, even without scaling limits. Such could be function that is part of single-page-app, that does not require authentication*\r\n\r\n**EAST module**\r\n```javascript\r\n\r\nconst { AzNodeRest } = require(\"../../../plugins/nodeSrc/east\")\r\nconst { erroResponseSchema } = require(\"../../../plugins/nodeSrc/functionResponseSchema\")\r\nconst { getProviderApiVersion } = require(\"../../../plugins/nodeSrc/getProvider\")\r\nconst { checkDoesItApply } = require(\"../../../plugins/nodeSrc/microsoftwebhelper\")\r\nconst { returnObjectInit } = require(\"../../../plugins/nodeSrc/returnObjectInit\")\r\nconst aadAuth = require(\"./aadAuth\")\r\n\r\n//AzNodeRest\r\nmodule.exports = async function (item) {\r\n\r\nlet returnObject = new returnObjectInit(item,__filename.split('/').pop())\r\n\r\nvar {apiversion} = getProviderApiVersion(item.id)\r\n\r\nif (item.id.match('honeypot')) {\r\n    console.log()\r\n}\r\nvar skip = checkDoesItApply(item,returnObject)\r\nif (skip) {\r\n    return skip\r\n}\r\n\r\nreturnObject.isHealthy=true\r\n\r\nvar orig = item\r\n\r\ntry {item = await AzNodeRest(`${item.id}/functions`,apiversion)} catch(error){\r\n    returnObject.metadata=error\r\n    return returnObject\r\n}\r\n\r\nvar checkForAuth = false\r\n\r\nvar bindings = item?.value.map(fn => {\r\n    var anonymous = fn?.properties?.config?.bindings.filter(s => s.type == \"httpTrigger\" && s.authLevel ==\"anonymous\" ) \r\n    if (anonymous.length > 0) {\r\n        checkForAuth = true\r\n    }\r\n    return {\r\n     name:fn.name,\r\n     full:fn?.properties?.config?.bindings,\r\n     bindings:fn?.properties?.config?.bindings.map((binding) => binding.type), \r\n     bindingsAuth:fn?.properties?.config?.bindings.map((binding) => binding.authLevel), \r\n     anonymous,\r\n     id:fn.id  \r\n    }\r\n});\r\n\r\nif (checkForAuth) {\r\n var {metadata:aadAuthEnabled} = await aadAuth(orig)\r\n var functionAppScaleLimit = await AzNodeRest(`${orig.id}/config/web?`,apiversion)\r\n console.log(functionAppScaleLimit?.properties?.functionAppScaleLimit)\r\n var extended = {\r\n    functionAppScaleLimit:functionAppScaleLimit?.properties?.functionAppScaleLimit,\r\n    aadAuthEnabled\r\n }\r\n if (extended.functionAppScaleLimit == 0 || aadAuthEnabled.result == \"no aad auth\" ) {\r\n     returnObject.isHealthy=false\r\n }\r\n}\r\n\r\n\r\nreturnObject.metadata = {bindings,extended:extended || \"Not applicable\"}\r\n\r\nreturn returnObject\r\n\r\n}            \r\n```"
}