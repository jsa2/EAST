{
"ControlId": "general_aadauthnz",
"Category": "Access",
  "Description": "\n\n**Notes regarding non AAD-based authentication options**\n- All string-based authentication methods in table below are considered **passwords**.\n\n❌Password/String-based authentication is not considered strong in terms of strength, as shown in the table below. Even though security can be increased with password length, and password rotation.\n  -   The table assumes rotation because password can be [leaked](https://msrc-blog.microsoft.com/2021/08/27/update-on-vulnerability-in-the-azure-cosmos-db-jupyter-notebook-feature/)\n\n❌Bypasses  Azure AD logs means that no events are produced for the resource type in Azure AD logs when the authentication mechanism is used.\n\n❌ Susceptible to sharing across multiple targets in the table means that the service allows human defined password (monkey/dog/cat/birthday) creation, thus allowing the admin to re-use passwords across systems\n- Services which generate these passwords, and don't allow admins to input passwords are considered not shareable in the same sense (not all services in the table can be shared across systems, but can be shared across clients still)\n\n    **Note: Even if the key is system generated, it can be obviously leaked** [If a SAS is leaked, it can be used by anyone who obtains it, which can potentially compromise resource utilizing SAS scheme](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-sas#best-practices-when-using-sas)\n\n\n**Notes regarding AAD-based authentication options**\n\n✔ Can be authorized based on Azure RBAC settings on services, and Azure AD roles granted for the API permissions\n\n✔ Are logged in both Azure AD and service specific logs\n\n✔ Can be managed as objects exposed in Azure AD and Azure RBAC (supports listing, filtering, policies and have specific properties which are exposed to configuration plane)\n\n**Service Table**\n\n- Column *Service logs* in table mean that there is logging option outside Azure, which typically includes the authentication information.\n\n**Service**|Azure AD & RBAC based | Logged in Azure AD | Logged in service specific logs | Rotation needed | Strength | Tied to resource lifecycle\n-|-|-|-|-|-|-\n| [Managed Identity](https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview#managed-identity-types) | ✅  | ✅ |✅ | ✅  Managed identities do not require rotation | ✅  **Strong** (Certificate based) | ✅ * When using system assigned managed identity \n| [Service Principal](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals#service-principal-object) (Password)  | ✅ | ✅ |✅ | Requires Rotation (supports expiration) | ❌Password based <br> *While it's convenient to use password secrets as a credential, we strongly recommend that you use x509 certificates as the only credential type for getting tokens for your application.* <a href=https://docs.microsoft.com/en-us/azure/active-directory/develop/security-best-practices-for-app-registration#credential-configuration> MS security-best-practices for Credential configuration <a> |  ❌ Suspectible to sharing across multiple targets (while not common, Azure AD ServicePrincipals support user created passwords, which can be shared, and can be weak in strength)\n| [Service Principal](https://docs.microsoft.com/en-us/azure/active-directory/develop/app-objects-and-service-principals#service-principal-object)  (Certificate)  | ✅ | ✅  |✅ | Less need for rotation as the service newer exposes the private key when requesting access tokens from Azure AD, still users or service can leak the key (supports expiration) - The key can additionally be protected by password, before it's allowed to form JWT token | ✅  **Strong** (Certificate based) [cert options](#certificate-option-for-client-credentials)  |  ❌ (Same Private Key could be shared for multiple app registrations)| \n| [Storage Account key](https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage?tabs=azure-portal#protect-your-access-keys)  | ❌ Bypasses Azure RBAC [note ¹](#fetching-non-azure-ad-based-credentials-with-initial-azure-ad-authentication) |❌ No AAD Log| ✅|Requires Rotation (❌Does not support expiration) |❌Password based |✅ \n\n--- "
}